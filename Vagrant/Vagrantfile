# -*- mode: ruby -*-
# vi:set ft=ruby sw=2 ts=2 sts=2:

# Define the number of master and worker nodes
# If this number is changed, remember to update setup-hosts.sh script with the new hosts IP details in /etc/hosts of each VM.
NUM_MASTER_NODE = 2
NUM_WORKER_NODE = 2

IP_NW = "192.168.5."
MASTER_IP_START = 10
NODE_IP_START = 20
LB_IP_START = 30

CERT_DIR = "ubuntu/kubernetes/certificates"
KUBE_CONFIG_DIR = "ubuntu/kubernetes/config"

KUBE_API_SERVER = "/tmp/kube-apiserver"
KUBE_CONTROLLER_MANAGER = "/tmp/kube-controller-manager"
KUBE_SCHEDULER = "/tmp/kube-scheduler"
KUBE_CTL = "/tmp/kubectl"
KUBE_PROXY = "/tmp/kube-proxy"
KUBELET = "/tmp/kubelet"

ETCD="/tmp/etcd.tar.gz"

CNI_PLUGINS="/tmp/cni-plugins.tgz"

# Replaces the HOST_IP placeholder on the daemon.json file with the actual host ip
# The customized daemon.json is needed to allow the VMs to download images from the
# private registry running on the host
HOST_IP = `ip a show dev ens33 | grep global | awk -F ' ' '{print $2}' | awk -F '/' '{print $1}'`
`sed -e 's/<HOST_IP>/#{HOST_IP.strip}/' ubuntu/docker/daemon.json > ubuntu/docker/daemon_.json`


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"
  config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  config.vm.provision :shell, privileged: false do |shell_action|
    ssh_public_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
    shell_action.inline = <<-SHELL
      echo #{ssh_public_key} >> /home/$USER/.ssh/authorized_keys
    SHELL
  end

  # Provision Master Nodes
  (1..NUM_MASTER_NODE).each do |i|
      config.vm.define "master-#{i}" do |node|
        # Name shown in the GUI
        node.vm.provider "virtualbox" do |vb|
            vb.name = "kubernetes-lab-master-#{i}"
            vb.memory = 2048
            vb.cpus = 2
        end
        node.vm.hostname = "master-#{i}"
        node.vm.network :private_network, ip: IP_NW + "#{MASTER_IP_START + i}"
        node.vm.network "forwarded_port", guest: 22, host: "#{2710 + i}"

        node.vm.provision "setup-hosts", :type => "shell", :path => "ubuntu/vagrant/setup-hosts.sh" do |s|
          s.args = ["enp0s8"]
        end

        node.vm.provision "setup-dns", type: "shell", :path => "ubuntu/update-dns.sh"

        INSTALLATION = "$HOME/installation"
        SCRIPTS = "#{INSTALLATION}/scripts/"
        CONFIG = "#{INSTALLATION}/config/"
        CERTS = "#{INSTALLATION}/certs/"
        BINARIES = "#{INSTALLATION}/binaries/"
        node.vm.provision "shell", inline: "mkdir #{INSTALLATION}"
        node.vm.provision "shell", inline: "mkdir #{SCRIPTS}"
        node.vm.provision "shell", inline: "mkdir #{CONFIG}"
        node.vm.provision "shell", inline: "mkdir #{CERTS}"
        node.vm.provision "shell", inline: "mkdir #{BINARIES}"

        # Certs
        node.vm.provision "file", source: "#{CERT_DIR}/ca.crt", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/ca.key", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/admin.key", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/admin.crt", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/kube-apiserver.key", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/kube-apiserver.crt", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/service-account.key", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/service-account.crt", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/etcd-server.key", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/etcd-server.crt", destination: "#{CERTS}"

        #Config
        node.vm.provision "file", source: "#{KUBE_CONFIG_DIR}/admin.kubeconfig", destination: "#{CONFIG}"
        node.vm.provision "file", source: "#{KUBE_CONFIG_DIR}/kube-controller-manager.kubeconfig", destination: "#{CONFIG}"
        node.vm.provision "file", source: "#{KUBE_CONFIG_DIR}/kube-scheduler.kubeconfig", destination: "#{CONFIG}"
        node.vm.provision "file", source: "#{KUBE_CONFIG_DIR}/encryption-config.yaml", destination: "#{CONFIG}"

        # Binaries
        node.vm.provision "file", source: "#{ETCD}", destination: "#{BINARIES}"
        node.vm.provision "file", source: "#{KUBE_API_SERVER}", destination: "#{BINARIES}"
        node.vm.provision "file", source: "#{KUBE_CONTROLLER_MANAGER}", destination: "#{BINARIES}"
        node.vm.provision "file", source: "#{KUBE_SCHEDULER}", destination: "#{BINARIES}"
        node.vm.provision "file", source: "#{KUBE_CTL}", destination: "#{BINARIES}"

        # Scripts
        node.vm.provision "file", source: "ubuntu/cert_verify.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/etcd/install-and-configure-etcd-server.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/install-kubernetes-master-binaries.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/configure-kube-api-server.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/configure-kube-controller-manager.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/configure-kube-scheduler.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/start-controller-services.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/enable-master-tls-bootstrapping.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/configure-master-rbac-for-kubelet-authorization.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/dns/apply-dns-add-on.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/configure-client-kubectl.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/install-master.sh", destination: "#{SCRIPTS}"
      end
  end

  # Provision Load Balancer Node
  config.vm.define "load-balancer" do |node|
    node.vm.provider "virtualbox" do |vb|
        vb.name = "kubernetes-lab-lb"
        vb.memory = 512
        vb.cpus = 1
    end
    node.vm.hostname = "load-balancer"
    node.vm.network :private_network, ip: IP_NW + "#{LB_IP_START}"
	node.vm.network "forwarded_port", guest: 22, host: 2730

    node.vm.provision "setup-hosts", :type => "shell", :path => "ubuntu/vagrant/setup-hosts.sh" do |s|
      s.args = ["enp0s8"]
    end

    node.vm.provision "setup-dns", type: "shell", :path => "ubuntu/update-dns.sh"
    # Install and configure haproxy
    node.vm.provision "install-and-configure-haproxy", type: "shell", :path => "ubuntu/haproxy/install-haproxy.sh"
  end

  # Provision Worker Nodes
  (1..NUM_WORKER_NODE).each do |i|
    config.vm.define "worker-#{i}" do |node|
        node.vm.provider "virtualbox" do |vb|
            vb.name = "kubernetes-lab-worker-#{i}"
            vb.memory = 512
            vb.cpus = 1
        end
        node.vm.hostname = "worker-#{i}"
        node.vm.network :private_network, ip: IP_NW + "#{NODE_IP_START + i}"
		node.vm.network "forwarded_port", guest: 22, host: "#{2720 + i}"

        node.vm.provision "setup-hosts", :type => "shell", :path => "ubuntu/vagrant/setup-hosts.sh" do |s|
          s.args = ["enp0s8"]
        end

        node.vm.provision "setup-dns", type: "shell", :path => "ubuntu/update-dns.sh"
        node.vm.provision "install-docker", type: "shell", :path => "ubuntu/install-docker.sh"
        node.vm.provision "allow-bridge-nf-traffic", :type => "shell", :path => "ubuntu/allow-bridge-nf-traffic.sh"

        INSTALLATION = "$HOME/installation"
        SCRIPTS = "#{INSTALLATION}/scripts/"
        CONFIG = "#{INSTALLATION}/config/"
        CERTS = "#{INSTALLATION}/certs/"
        BINARIES = "#{INSTALLATION}/binaries/"
        node.vm.provision "shell", inline: "mkdir #{INSTALLATION}"
        node.vm.provision "shell", inline: "mkdir #{SCRIPTS}"
        node.vm.provision "shell", inline: "mkdir #{CONFIG}"
        node.vm.provision "shell", inline: "mkdir #{CERTS}"
        node.vm.provision "shell", inline: "mkdir #{BINARIES}"

        node.vm.provision "file", source: "#{CERT_DIR}/ca.crt", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/admin.key", destination: "#{CERTS}"
        node.vm.provision "file", source: "#{CERT_DIR}/admin.crt", destination: "#{CERTS}"

        node.vm.provision "file", source: "#{KUBE_CONFIG_DIR}/kube-proxy.kubeconfig", destination: "#{CONFIG}"
        node.vm.provision "file", source: "ubuntu/docker/daemon_.json", destination: "#{CONFIG}daemon.json"

        # Install kubernetes binaries
        node.vm.provision "file", source: "#{KUBE_CTL}", :destination => "#{BINARIES}"
        node.vm.provision "file", source: "#{KUBE_PROXY}", :destination => "#{BINARIES}"
        node.vm.provision "file", source: "#{KUBELET}", :destination => "#{BINARIES}"

        node.vm.provision "file", source: "ubuntu/cert_verify.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/docker/restart-docker.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/install-kubernetes-worker-binaries.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/configure-client-kubectl.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/enable-worker-tls-bootstrapping.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/deploy-weave-network.sh", destination: "#{SCRIPTS}"
        node.vm.provision "file", source: "ubuntu/kubernetes/install-worker.sh", destination: "#{SCRIPTS}"
    end
  end
end